package main

import (
	// "encoding/json"
	"encoding/xml"
	"fmt"
	"io/ioutil"
	"log"
)

type product struct {
	ID    string `json:id`
	Title string `json:title`
	Price string `json:price`
}

type DataFormat struct {
	Rss struct {
		Channel struct {
			ProductList []struct {
				Sku      string `xml:"sku" json:"sku"`
				Quantity int    `xml:"quantity" json:"quantity"`
			} `xml:"Product" json:"products"`
		} `xml:"ProductList" json:"ProductList"`
	} `xml:"channel" json:"channel"`
}

func main() {
	xmlData, err := ioutil.ReadFile("products.xml")
	if err != nil {
		log.Fatal(err)
	}
	data := &DataFormat{}

	err = xml.Unmarshal(xmlData, data)
	if nil != err {
		fmt.Println("Error unmarshalling from XML", err)
		return
	}

	// map of string -> product
	products := make(map[string]product)

	for _, prod := range data.Rss.Channel.ProductList {
		products[prod.Sku] = product{ID: prod.Sku, Title: "usb 3.0 8GB", Price: "5.99"}
	}

	fmt.Printf("%+v\n", products)

	// result, err := json.Marshal(data)
	// if nil != err {
	// 	fmt.Println("Error marshalling to JSON", err)
	// 	return
	// }

	// fmt.Printf("%s\n", result)
}
